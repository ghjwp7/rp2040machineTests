.. -*- mode: rst -*-  #  RM for DMA_CtrlReg - jiw - 1 Jan 2025
..  To view this in html in browser, use `restview <fn>` (fn=this file)
..  Browser page updates when changed version is stored.

README-DMA_CtrlReg

================================================================
`DMA_CtrlReg.py <DMA_CtrlReg.py>`_ & `testDCR.py <testDCR.py>`_
================================================================

DMA control registers like `CHx_CTRL_TRIG, CHx_AL1_CTRL,
CHx_AL2_CTRL,` and `CHx_AL3_CTRL` on an RP2040 system (eg, a Raspberry
Pi Pico) are 32-bit registers that contain 16 fields controlling how a
DMA channel behaves.  Table 124 in the RP2040 Datasheet shows field
names and widths.  One could manually decode control register values,
but using a program as described here can save time and effort when
decoding such values.


`DMA_CtrlReg.py` contains four small functions to assist in
decoding or printing values of bit fields from a packed DMA control
register value.  `testDCR.py` imports functions from
`DMA_CtrlReg` and runs tests.

The routines here may be useful if you want to compactly print
control register settings.  If less-compact output is ok, you can
instead do the following (where p=control register value)::

  from rp2 import DMA
  print(f'{p=:08x}  {DMA.unpack_ctrl(p)}')
  
--------------------------------------
Example Output from testDCR.py
--------------------------------------

Output shown below is from `testDCR`.  The first section shows the
tuple that `DMA_CtrlReg.fieldList()` returns.  [Line-breaks added for
readability.]  With control-word fields listed in ascending order from
LSB, the tuple has a pair for each field, with **field name** and
**number of bits** in field.  *Comment:* If field order and field size
are not of interest, one can use the `DMA.unpack_ctrl(p)` function to
get field names and values for control-word `p`.

Example: From tuple entry **('treq_sel', 6)**, the **treq_sel** field
is 6 bits long.  Note, see Table 124 in Datasheet for field
explanations. ::

    fieldList(): (('enable', 1), ('high_pri', 1), ('size', 2),
    ('inc_read', 1), ('inc_write', 1), ('ring_size', 4), ('ring_sel', 1),
    ('chain_to', 4), ('treq_sel', 6), ('irq_quiet', 1), ('bswap', 1),
    ('sniff_en', 1), ('busy', 1), ('reserved', 4), ('write_err', 1),
    ('read_err', 1), ('ahb_err', 1))

The second section of `testDCR` output shows byte arrays returned by
five calls to `DMA_CtrlReg.unpackVals(p)`, for hex values of `p` as
in parentheses. ::

                                           sz ir iw         treq         bz    we re ae
    unpackVals(01200025): array('b', [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0])
    unpackVals(01200029): array('b', [1, 0, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0])
    unpackVals(00220021): array('b', [1, 0, 0, 0, 1, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0])
    unpackVals(003f8021): array('b', [1, 0, 0, 0, 1, 0, 0, 0, 63, 1, 0, 0, 0, 0, 0, 0, 0])
    unpackVals(003f8025): array('b', [1, 0, 1, 0, 1, 0, 0, 0, 63, 1, 0, 0, 0, 0, 0, 0, 0])

The last section of `testDCR` output shows a two-line title printed by
`DMA_CtrlReg.printHeadLines()`, followed by output from five calls
to `DMA_CtrlReg.printCodes(p)`.  The code that prints field names
breaks them arbitrarily into two 4-character pieces, discarding any
characters beyond the first 8. ::

              enab high size inc_ inc_ ring ring chai treq irq_ bswa snif busy rese writ read ahb_
                le _pri      read writ _siz _sel n_to _sel quie    p f_en      rved e_er _err  err
    01200025    1    0    1    0    1    0    0    0    0    1    0    0    1    0    0    0    0
    01200029    1    0    2    0    1    0    0    0    0    1    0    0    1    0    0    0    0
    00220021    1    0    0    0    1    0    0    0    4    1    0    0    0    0    0    0    0
    003f8021    1    0    0    0    1    0    0    0   3f    1    0    0    0    0    0    0    0
    003f8025    1    0    1    0    1    0    0    0   3f    1    0    0    0    0    0    0    0

--------------------------------------
  Test Environment
--------------------------------------

Code was tested 5 Jan 2025 in Python 3.10.12 on an ubuntu.22.04 Linux
system.  When running this test on an RP2040-based system with
MicroPython, both of `testDCR.py` and `DMA_CtrlReg.py` need to be
on the system.

jiw - 5 Jan, 20 Jan 2025

