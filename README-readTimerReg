.. -*- mode: rst -*-  #  README for readTimerReg.py  - jiw - 4 Jan 2025
.. To view this as html in browser, use `restview fn &` with fn = name
.. of this file.  Browser page updates when changed file is stored.

========================================
readTimerReg.py
========================================

**Aim:** On an RP2040, `readTimerReg3.py <readTimerReg3.py>`_ tries
several ways of accessing the RP2040's main timer register.  (RP2040 =
processor in Raspberry Pi Pico and many other boards.)

Tests in `readTimerReg2.py <readTimerReg2.py>`_ were run in several
modes: ðŸ”¸calling `ticks_us()`, as imported from `utime`; ðŸ”¸accessing
the TIMELR register at 12+TIMER_BASE = 12+0x40054000 via `mem32[]`;
ðŸ”¸ðŸ”¸each of those again, but in native-code compilations; and
ðŸ”¸accessing the register via a `ptr32()` reference within a
viper-translated function.

Tests in `readTimerReg3.py <readTimerReg3.py>`_ run in the following
modes:ðŸ”¸ðŸ”¸accessing the low byte of a bytearray at TIMELR, in plain
python and with a decorator, ``@micropython.native``;ðŸ”¸ðŸ”¸calling
``ticks_us()`` in plain python and with ``native`` decorator;
ðŸ”¸calling ``ticks_us()`` with ``@micropython.viper``
decorator;ðŸ”¸accessing TIMELR via ``ptr32`` pointer and
``@micropython.viper`` decorator.

Each test for a mode stores a series of timer readings in an array.
In ``readTimerReg2``, array size is 9 integers; arrays are allocated
within test units, and returned to caller.  In ``readTimerReg3``,
array size is 17 integers; caller allocates arrays, and arrays are
modified in place.  Comparing results from the two programs, the
latter approach looks substantially faster, somehow affecting the time
to record each array element.

Each mode is tested several times, with modes taken in different
orders in successive tests, to ameliorate -- or perhaps confound --
test order effects.

After taking all of its readings and storing them in arrays,
``readTimerReg`` prints out results, grouped by reading mode, hence
four lines per mode.  That is, data lines from four runs for each mode
are grouped together.  Each number in a line of output is the
difference of an item from the previous item, with the first reading
taken as t0.

Unsurprisingly, viper-compiled code is by far the fastest.  On the
other hand, code using mem32[] is rather slow, as is code that depends
on ``int.from_bytes``. (The latter was tested in an earlier version of
``readTimerReg3``, and now is commented out.)

In output below, numbers shown are differences between consecutive
recorded values.

The first output shown below is from a run of ``readTimerReg3``, at
default system frequency, 125 MHz.  That's followed by results from
``readTimerReg2``, and finally tests run at other clock rates than the
125 MHz default system frequency are given.

-------------------

------------------------------------------------------------------
  Example 1 Output
------------------------------------------------------------------

This section has results from `readTimerReg3.py <readTimerReg3.py>`_,
running at 125 MHz.

ðŸ”µTest unit **mm** is plain python, using a bytearray::

    b = uctypes.bytearray_at(TIMELR,4)
    for j in range(nn):  aa[j] = b[0]

Unit **mp** is the same, but preceded by ``@micropython.native``.  These
routines run fairly quickly, but are storing only one byte, not the
whole-word value of TIMELR.  Note, analysis code says ``dt = t-pt if
t>=pt else 256+t-pt`` to compensate for byte overflow that occurs
every 256 microseconds.  The code ignores word overflows, which occur about 1.2 hours apart.    ::

    0 22 12 12 11 11 11 13 12 11 11 12 11 10 11 12 11
    0 19 12 10 11 11 11 12 13 11 10 11 12 13 10 12 10
    0 18 12 11 12 12 11 12 12 11 12 12 11 12 13 11 12
    0 16 13 11 11 11 12 11 12 11 12 11 11 12 11 12 12
    mm: 64 readings average 11.938 Î¼s each
    
    1 12  6  6  6  6  6  6  6  6  6  5  6  6  6  6  6
    1 11  7  6  6  6  6  5  6  6  6  6  6  6  6  6  6
    1 11  6  6  6  6  6  6  5  6  6  6  6  6  6  6  6
    1 13  6  6  5  6  6  6  6  6  6  6  6  6  6  6  6
    mp: 64 readings average 6.313 Î¼s each


ðŸ”µTest unit **pp** is plain python, using a ``ticks_us()`` call::

    for j in range(nn):  aa[j] = ticks_us()

Unit **np** is the same, but preceded by ``@micropython.native``. ::

    2 19 11 12 13 13 11 13 13 12 11 13 12 13 13 12 12
    2 18 12 12 13 12 11 13 11 12 11 13 11 13 13 12 12
    2 22 12 11 14 12 12 12 12 12 12 13 12 12 13 12 12
    2 18 14 11 11 14 12 12 11 12 13 12 11 12 13 12 13
    pp: 64 readings average 12.625 Î¼s each
    
    3 35  9  7  6  7  6  7  6  7  6  7  6  7  6  7  7
    3 15  9  8  8  9  7  6  7  7  6  7  6  7  6  7  6
    3 12  7  6  7  6  7  6  7  7  6  7  6  7  6  7  6
    3 15  8  8  6  7  6  7  6  7  6  7  7  6  7  6  7
    np: 64 readings average 7.547 Î¼s each

ðŸ”µTest unit **vp** is like **np** except for its
``@micropython.viper`` decorator and having a ``:int`` type hint, and
an ``int()`` cast.  Without those modifications, viper can't handle
the code. By contrast, using ``@micropython.native`` with other test
units didn't require modifications.  ::

    4  5  3  3  3  3  2  3  3  3  3  3  3  3  3  2  3
    4  3  3  3  2  3  3  3  3  3  3  3  3  2  3  3  3
    4  3  3  3  3  3  3  3  2  3  3  3  3  3  3  3  3
    4  3  3  3  3  3  3  3  3  2  3  3  3  3  3  3  3
    vp: 64 readings average 2.938 Î¼s each
    
ðŸ”µTest unit **vv** has a ``@micropython.viper`` decorator and uses
``ptr32(TIMELR)`` to access the timer.  Note, ``ptr32()`` is available
within viper, not outside it. ::

    5  1  0  1  0  0  1  0  0  1  0  1  0  0  1  0  0
    5  1  0  1  0  0  1  0  0  1  0  1  0  0  1  0  0
    5  0  0  1  0  0  1  0  1  0  0  1  0  0  1  0  1
    5  1  0  0  1  0  0  1  0  1  0  0  1  0  0  1  0
    vv: 64 readings average 0.375 Î¼s each

-------------------

--------------------------------------
      Example 2 Output
--------------------------------------

This section gives some output from the ``readTimerReg2`` program.

ðŸ”µ Lines l-o show results of using `ticks_us()` to record the current
time in microseconds.  Loop times averaged slightly over 12 Î¼s per pass. ::

    l  28 53 15 15 12 11 11 12 13
    m  13 17 12 10 11 12 13 12 12
    n  14 15 13 14 13 12 12 11 11
    o  12 13 12 11 12 13 10 12 11

ðŸ”µ Lines p-s show results of using `mem32[]` references to the
`TIMELR` register, as explained in section 4.6.5. of the RP2040
Datasheet.  That section has a lengthy list of timer registers,
together with their offsets from `TIMER_BASE`, the base address for
memory-mapped timer registers.  Loop times averaged around 38 Î¼s per
pass. ::

    p  52 90 44 40 37 38 35 38 37
    q  30 48 39 36 36 37 38 36 35
    r  29 49 42 37 37 37 37 38 38
    s  30 52 41 40 35 38 37 36 38

ðŸ”µ Lines u-x show results of using `ptr32()` [which is available
within viper-compiled code] to access `TIMELR`.  This method is able
to store timer readings at 4 Î¼s intervals, with each reading offset
against a `t0` value. ::

    u   1  9  4  4  4  4  4  4  4
    v   0  5  4  4  4  4  4  4  4
    w   0  5  4  4  4  4  4  4  4
    x   0  5  4  4  4  4  4  4  4

Note, unusually the last three `ptr32()` runs (u,v,x) all had the same
results.  In most runs, there were small variations of a tick or two
in reported times.

-------------------

--------------------------------------
   Tests at other clock rates
--------------------------------------

`readTimerReg` can run sets of tests at various system frequencies. In
``readTimerReg3``, edit the if/elif sequence at the beginning of main,
to choose a set of frequencies.  In ``readTimerReg2``, variables
``underLimit`` and ``speedLimit`` govern; tests are run at those
speeds from a list, not below `underLimit` or above `speedLimit`.  Let
f0 be the system frequency (typically 125 MHz) when the program
starts.  `main` calls `runTest(f)` for each in-limits frequency `f`
from the list (f0, 100000000, 200000000, 250000000, f0).  Note,
`runTest(f)` may try twice to set a requested system frequency,
because the program did not succeed in changing from 250 MHz to 125
MHz with only one try.

Note, frequencies beyond 133 MHz are out-of-spec for the RP2040.  Use
`speedLimit = 133000000` if concerned.  However, my testing worked ok
at 200 MHz and 250 MHz, with times for first and third access methods
always decreasing proportionately to system cycle time.

Times for `mem32[]` access, on the other hand, were sometimes
anomalous.  If `underLimit` and `speedLimit` both are 125000000, loop
times typically average around 38 Î¼s per pass.  With `speedLimit` at
250000000, loop times typically average half that.  However, as seen
in the following results (from successive `runTest` passes) `mem32[]`
access times (lines p,q,r,s) on occasion sharply decreased, to less
than half their typical values::

    System frequency = 250000000 Hz
    l   9 19  8  6  6  6  5  7  6
    m   5  9  7  6  7  5  5  7  7
    n   6  7  7  5  6  6  6  6  6
    o   5  8  6  5  6  6  6  6  6
    
    p  27 12  8  8  7  9  7  9  7
    q   8  8  8  9  8  9  8  7  9
    r   9  9  9  8  8  8  8  7  8
    s   8  9  8  8  8  8  8  7  9
    
    u   0  3  2  2  2  2  2  2  2
    v   0  3  2  2  2  2  2  2  2
    w   0  2  2  2  2  2  2  2  2
    x   0  2  2  2  2  2  2  2  2
    
    System frequency = 125000000 Hz
    l  27 41 12 13 11 13 13 12 12
    m  10 14 14 12 13 12 12 11 13
    n 11 16 11 12 12 13 11 11 13
    o  12 16 11 13 12 13 11 13 12
    
    p  21 20 16 16 15 19 15 17 16
    q  13 21 16 16 16 17 15 16 15
    r  16 19 18 16 19 14 17 16 16
    s  17 18 15 17 16 15 16 15 17
    
    u   0  7  4  4  4  4  4  4  4
    v   1  5  4  4  4  4  4  4  3
    w   0  5  4  4  4  4  4  4  4
    x   0  5  4  4  4  4  4  4  4
    System frequency = 125000000 Hz

The decrease persisted in many subsequent runs, disappearing when I
set `underLimit` and `speedLimit` both to 125000000, and not reliably
reappearing later with other limits.

-------------------

--------------------------------------
  Test Environment
--------------------------------------

Code was tested ca 4 Jan and 12 Jan 2025 using a small inexpensive
board labeled RP2040-Zero running MicroPython v1.25.0-preview.160, via
Thonny 3.3.14 IDE on an ubuntu.22.04 Linux system.  ::

    MicroPython v1.25.0-preview.160.gc73204128 on 2024-12-30; Raspberry Pi Pico with RP2040
    Type "help()" for more information.
    >>> 

jiw - 4 Jan, 12 Jan 2025
